# This reusable workflow creates or checks for a GitHub release.
# It performs the following steps:
# 1. Generates a release name and cache key based on the current date.
# 2. Checks if a release with the generated name already exists.
# 3. If the release does not exist, it creates a new release.
# 4. Outputs the release ID for use in subsequent workflows.

name: Create Release

on:
  workflow_call:
    inputs:
      base_name:
        description: 'Base name for the release which will be appended with the current date'
        required: true
        type: string
      base_txt:
        description: 'Base text  for the release'
        required: true
        type: string
    outputs:
      release_name:
        description: 'The generated release name'
        value: ${{ jobs.get-date-release-name.outputs.release_name }}
      release_id:
        description: 'The generated release id'
        value: ${{ jobs.get-date-release-name.outputs.release_id }}
      release_url:
        description: 'The generated release url'
        value: ${{ jobs.get-date-release-name.outputs.release_url }}
      cache_key:
        description: 'The generated cache key'
        value: ${{ jobs.get-date-release-name.outputs.cache_key }}

jobs:
  get-date-release-name:
    runs-on: ubuntu-latest
    outputs:
      release_name: ${{ steps.current-date.outputs.release_name }}
      release_id: ${{ steps.get-release-id.outputs.release_id }} 
      release_url: ${{ steps.current-date.outputs.release_url }}
      cache_key: ${{ steps.current-date.outputs.cache_key }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Get Current Date and Release Name
        id: current-date
        run: |
          current_date=$(date +'%Y-%m-%d')
          release_name="${{ inputs.base_name }}-${current_date}"
          cache_key="raspOVOS-${{ github.run_id }}"
          release_url="https://github.com/${{ github.repository }}/releases/download/${release_name}"
          echo "release_name=$release_name" >> $GITHUB_OUTPUT
          echo "release_url=$release_url" >> $GITHUB_OUTPUT
          echo "cache_key=$cache_key" >> $GITHUB_OUTPUT

      - name: Print outputs
        shell: bash
        run: |
          echo "release_name: ${{ steps.current-date.outputs.release_name }}" 
          echo "release_url: https://github.com/${{ github.repository }}/releases/download/${{ steps.current-date.outputs.release_name }}"
          echo "cache_key: ${{ steps.current-date.outputs.cache_key }}" 
      
      - name: Check if Release Exists
        id: get-release-id
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}"
          release_name="${{ steps.current-date.outputs.release_name }}"
          release=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/$release_name")
          release_id=$(echo $release | jq -r .id)
          echo "release=$release" 
          echo "release_id=$release_id" 
          if [[ "$release_id" == "null" ]]; then
          echo "release_id=null" 
          release=$(curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{\"tag_name\":\"$release_name\",\"name\":\"$release_name\",\"body\":\"${{ inputs.base_txt }}\"}" \
              "https://api.github.com/repos/${{ github.repository }}/releases")
          release_id=$(echo $release | jq -r .id)
          fi
          echo "release_id=$release_id" >> $GITHUB_OUTPUT

      - name: Print outputs
        shell: bash
        run: |
          echo "release_id: ${{ steps.get-release-id.outputs.release_id }}" 
