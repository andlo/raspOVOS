name: Create Release

on:
  workflow_call:
    inputs:
      base_name:
        description: 'Base name for the release which will be appended with the current date'
        required: true
        type: string
    outputs:
      release_name:
        description: 'The generated release name'
        value: ${{ jobs.get-date-release-name.outputs.release_name }}
      release_id:
        description: 'The generated release id'
        value: ${{ jobs.check-release-or-create.outputs.release_id }}
      cache_key:
        description: 'The generated cache key'
        value: ${{ jobs.get-date-release-name.outputs.cache_key }}

jobs:
  get-date-release-name:
    runs-on: ubuntu-latest
    outputs:
      release_name: ${{ steps.current-date.outputs.release_name }}
      cache_key: ${{ steps.current-date.outputs.cache_key }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Get Current Date and Release Name
        id: current-date
        run: |
          current_date=$(date +'%Y-%m-%d')
          release_name=" ${{ inputs.base_name }}-${current_date}"
          cache_key="raspOVOS-${{ github.run_id }}"
          echo "release_name=$release_name" >> $GITHUB_ENV
          echo "cache_key=$cache_key" >> $GITHUB_ENV

      - name: Print outputs
        shell: bash
        run: |
          echo "cache_key: ${{ steps.current-date.outputs.cache_key }}"
          echo "release_name: ${{ steps.current-date.outputs.release_name }}"

  check-release-or-create:
    runs-on: ubuntu-latest
    needs: get-date-release-name
    outputs:
        release_id: ${{ steps.get-release-id.outputs.release_id }} 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Check if Release Exists
        id: get-release-id
        run: |
          release_name="${{ needs.get-date-release-name.outputs.release_name }}"
          release=$(curl -s -H "Authorization: token ${{ secrets.PA_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/$release_name")
          release_id=$(echo $release | jq -r .id)
          if [[ "$release_id" == "null" ]]; then
          release=$(curl -s -X POST -H "Authorization: token ${{ secrets.PA_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{\"tag_name\":\"$release_name\",\"name\":\"$release_name\",\"body\":\"Testing base OS setup only.\"}" \
              "https://api.github.com/repos/${{ github.repository }}/releases")
          release_id=$(echo $release | jq -r .id)
          fi
          echo "release_id=$release_id" >> $GITHUB_ENV

      - name: Print outputs
        shell: bash
        run: |
          echo "release_id: ${{ steps.get-release-id.outputs.release_id }}"
          if [[ $release_id == "null" ]]; then
          echo "Failed to create release. Response: $release"
          exit 1
          fi

