# This workflow builds and releases Raspberry Pi OS images with OpenVoiceOS modifications.
# It performs the following steps:
# 1. Creates a release.
# 2. Builds the base image.
# 3. Lists language directories to create a matrix for building language-specific images.
# 4. Builds language-specific images sequentially.

name: Build Release

on:
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_name: ${{ steps.current-date.outputs.release_name }}
      release_url: ${{ steps.print-outputs.outputs.release_url }}
      release_id: ${{ steps.get-release-id.outputs.release_id }}
      cache_key: ${{ steps.current-date.outputs.cache_key }}
    steps:
      - name: Get current date
        id: current-date
        run: |
          release_name="raspOVOS-$(date +'%Y%m%d')"
          cache_key="test-raspOVOS-$(date +'%Y%m%d')"
          echo "release_name=$release_name" >> $GITHUB_OUTPUT
          echo "cache_key=$cache_key" >> $GITHUB_OUTPUT

      - name: Print outputs
        id: print-outputs
        shell: bash
        run: |
          echo "release_name: ${{ steps.current-date.outputs.release_name }}" 
          echo "release_url: https://github.com/${{ github.repository }}/releases/download/${{ steps.current-date.outputs.release_name }}"
          echo "cache_key: ${{ steps.current-date.outputs.cache_key }}" 
          echo "release_url=https://github.com/${{ github.repository }}/releases/download/${{ steps.current-date.outputs.release_name }}" >> $GITHUB_OUTPUT

      - name: Check if Release Exists
        id: get-release-id
        run: |
          release_name="${{ steps.current-date.outputs.release_name }}"
          release=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/$release_name")
          release_id=$(echo $release | jq -r .id)
          if [[ "$release_id" == "null" ]]; then
            echo "release_id=null" 
            release=$(curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d "{\"tag_name\":\"$release_name\",\"name\":\"$release_name\",\"body\":\"${{ inputs.base_txt }}\"}" \
                "https://api.github.com/repos/${{ github.repository }}/releases")
            release_id=$(echo $release | jq -r .id)
          fi
          echo "release_id=$release_id" >> $GITHUB_OUTPUT

      - name: Print release ID
        shell: bash
        run: |
          echo "release_id: ${{ steps.get-release-id.outputs.release_id }}"

  build-no-ovos-image:
    needs: create-release
    uses: ./.github/workflows/modify_rpi_image.yml
    with:
      base_image_url: https://downloads.raspberrypi.com/raspios_lite_arm64/images/raspios_lite_arm64-2024-11-19/2024-11-19-raspios-bookworm-arm64-lite.img.xz
      release_url: ${{ needs.create-release.outputs.release_url }}
      release_id: ${{ needs.create-release.outputs.release_id }}
      cache_key: ${{ needs.create-release.outputs.cache_key }}
      image_path: raspOVOS-NO-OVOS-bookworm-arm64-lite.img
      script_path: ./base/build_base.sh

  build-base-image:
    needs: [create-release, build-no-ovos-image]
    uses: ./.github/workflows/modify_rpi_image.yml
    with:
      base_image_url: ${{ needs.build-no-ovos-image.outputs.image_url }}
      release_url: ${{ needs.create-release.outputs.release_url }}
      release_id: ${{ needs.create-release.outputs.release_id }}
      cache_key: ${{ needs.create-release.outputs.cache_key }}
      image_path: raspOVOS-BASE-bookworm-arm64-lite.img
      mycroft_config_files: "./languages/default/mycroft.conf"
      script_path: ./languages/default/build_raspOVOS.sh
      constraints: "https://github.com/OpenVoiceOS/ovos-releases/raw/refs/heads/main/constraints-alpha.txt"

  list-languages:
    needs: [create-release, build-no-ovos-image, build-base-image]
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.list-dirs.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: List language directories
        id: list-dirs
        run: |
          dirs=$(ls -d ./languages/*/ | grep -v './languages/default/')
          dirs_json=$(echo $dirs | sed 's|./languages/||g' | sed 's|/||g' | jq -R -s -c 'split(" ") | map(select(length > 0))')
          echo "matrix=$dirs_json" >> $GITHUB_OUTPUT

  build-images:
    needs: [create-release, build-no-ovos-image, build-base-image, list-languages]
    strategy:
      matrix:
        language: ${{ fromJson(needs.list-languages.outputs.matrix) }}
      max-parallel: 1
    uses: ./.github/workflows/build_images.yml
    with:
      base_image_url: ${{ needs.build-base-image.outputs.image_url }}
      release_url: ${{ needs.create-release.outputs.release_url }}
      release_id: ${{ needs.create-release.outputs.release_id }}
      cache_key: ${{ needs.create-release.outputs.cache_key }}
      mycroft_config_files: "./languages/default/mycroft.conf,./languages/${{ matrix.language }}/mycroft.conf"
      script_path: "./languages/${{ matrix.language }}/build_raspOVOS.sh"
      constraints: https://github.com/OpenVoiceOS/ovos-releases/raw/refs/heads/main/constraints-alpha.txt
      languages: ${{ matrix.language }}