# This reusable workflow modifies a Raspberry Pi OS image.
# It performs the following steps:
# 1. Checks out the repository.
# 2. Checks if the image is already uploaded to GitHub.
# 3. Tunes the base Raspberry Pi OS Bookworm image using the TigreGotico/rpi-image-modifier action.
# 4. Prints the outputs, including the image path, image size, and image sha256sum.
# 5. Uploads the modified image to a GitHub release.

name: Modify RPi Image

on:
  workflow_call:
    inputs:
      base-image-url:
        description: 'The URL of the base image'
        required: true
        type: string
      release_id:
        description: 'The release ID'
        required: true
        type: string
      release_url:
        description: 'The release URL'
        required: true
        type: string
      cache_key:
        description: 'The cache key'
        required: true
        type: string
      image-path:
        description: 'The path to the modified image'
        required: true
        type: string
      script-path:
        description: 'The path to the script'
        required: true
        type: string
      mycroft-config-files:
        description: 'The Mycroft configuration files'
        required: false
        type: string
      constraints:
        description: 'The constraints file'
        required: false
        type: string
    outputs:
      image-path:
        description: 'The path to the modified image'
        value: ${{ jobs.modify-rpi-image.outputs.image-path }}
      image-url:
        description: 'The URL of the modified image'
        value: ${{ inputs.release_url }}/${{ jobs.modify-rpi-image.outputs.image-path }}
      image-size:
        description: 'The size of the modified image'
        value: ${{ jobs.modify-rpi-image.outputs.image-size }}
      image-sha256sum:
        description: 'The sha256sum of the modified image'
        value: ${{ jobs.modify-rpi-image.outputs.image-sha256sum }}
jobs:
  modify-rpi-image:
    runs-on: ubuntu-latest
    outputs:
      image-path: ${{ steps.create-image.outputs.image-path }}
      image-size: ${{ steps.create-image.outputs.image-size }}
      image-sha256sum: ${{ steps.create-image.outputs.image-sha256sum }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if Required Files Exist
        id: check-files
        run: |
          if [ ! -f "${{ inputs.script-path }}" ]; then
            echo "Script file ${{ inputs.script-path }} does not exist."
            echo "skip_steps=true" >> $GITHUB_OUTPUT
          else
            IFS=',' read -r -a file_array <<< "${{ inputs.mycroft-config-files }}"
            for config_file in "${file_array[@]}"; do
              if [ ! -f "$config_file" ]; then
                echo "Mycroft config file $config_file does not exist."
                echo "skip_steps=true" >> $GITHUB_OUTPUT
                exit 0
              fi
            done
            echo "skip_steps=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Check if Image is Already Uploaded
        id: check-image
        run: |
          image_url="${{ inputs.release_url }}/${{ inputs.image-path }}".xz
          echo "Checking URL: $image_url"
          response=$(curl -L --write-out '%{http_code}' --silent --output /dev/null "$image_url")
          echo "HTTP response code: $response"
          if [ "$response" -eq 200 ]; then
            echo "Image already exists at $image_url"
            echo "skip_create_image=true" >> $GITHUB_OUTPUT
            echo "image_url=$image_url" >> $GITHUB_OUTPUT
          else
            echo "Image does not exist at $image_url"
            echo "skip_create_image=false" >> $GITHUB_OUTPUT
          fi

      - name: Tune base Raspberry Pi OS Bookworm
        if: ${{ steps.check-files.outputs.skip_steps == 'false' && steps.check-image.outputs.skip_create_image == 'false' }}
        uses: TigreGotico/rpi-image-modifier@main
        id: create-image
        env:
          USER: 'ovos'
          PASSWORD: 'ovos'
          HOSTNAME: "raspOVOS"
          CONSTRAINTS: ${{ inputs.constraints }} 
          MYCROFT_CONFIG_FILES: ${{ inputs.mycroft-config-files }}
        with:
          base-image-url: ${{ inputs.base-image-url }}
          image-path: ${{ inputs.image-path }}
          compress-with-xz: true
          cache: false
          shrink: true
          mount-repository: true
          env-vars: USER,PASSWORD,HOSTNAME,CONSTRAINTS,MYCROFT_CONFIG_FILES
          script-path: ${{ inputs.script-path }}

      - name: Print outputs
        shell: bash
        run: |
          echo "image-path: ${{ steps.create-image.outputs.image-path }}"
          echo "image-size: ${{ steps.create-image.outputs.image-size }}"
          echo "image-sha256sum: ${{ steps.create-image.outputs.image-sha256sum }}"

      - name: Upload to release
        if: ${{ steps.check-files.outputs.skip_steps == 'false' && steps.check-image.outputs.skip_create_image == 'false' }}
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: ${{ steps.create-image.outputs.image-path }}
          release_id: ${{ inputs.release_id }}
          draft: false
          overwrite: true
          prerelease: false
          verbose: true
        