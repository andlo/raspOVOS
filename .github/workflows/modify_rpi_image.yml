# This reusable workflow modifies a Raspberry Pi OS image.
# It performs the following steps:
# 1. Checks out the repository.
# 2. Checks if the image is already uploaded to GitHub.
# 3. Tunes the base Raspberry Pi OS Bookworm image using the TigreGotico/rpi-image-modifier action.
# 4. Prints the outputs, including the image path, image size, and image sha256sum.
# 5. Uploads the modified image to a GitHub release.

name: Modify RPi Image

on:
  workflow_call:
    inputs:
      base-image-url:
        required: true
        type: string
      release_id:
        required: true
        type: string
      cache_key:
        required: true
        type: string
      image-path:
        required: true
        type: string
      script-path:
        required: true
        type: string
      mycroft-config-files:
        required: true
        type: string

jobs:
  modify-rpi-image:
    runs-on: ubuntu-latest
    outputs:
      image-path: ${{ steps.set-output-image-path.outputs.image_path }}
      image-size: ${{ steps.set-output-image-size.outputs.image_size }}
      image-sha256sum: ${{ steps.set-output-image-sha256sum.outputs.image_sha256sum }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if Image is Already Uploaded
        id: check-image
        run: |
          image_url="https://github.com/${{ github.repository }}/releases/download/${{ inputs.release_id }}/${{ inputs.image-path }}"
          response=$(curl --write-out '%{http_code}' --silent --output /dev/null "$image_url")
          if [ "$response" -eq 200 ]; then
            echo "Image already exists at $image_url"
            echo "skip_create_image=true" >> $GITHUB_ENV
          else
            echo "Image does not exist at $image_url"
            echo "skip_create_image=false" >> $GITHUB_ENV

      - name: Tune base Raspberry Pi OS Bookworm
        if: ${{ steps.check-image.outputs.skip_create_image == 'false' }}
        uses: TigreGotico/rpi-image-modifier@main
        id: create-image
        env:
          USER: 'ovos'
          PASSWORD: 'ovos'
          HOSTNAME: "raspOVOS"
          CONSTRAINTS: "https://github.com/OpenVoiceOS/ovos-releases/raw/refs/heads/main/constraints-alpha.txt"
          MYCROFT_CONFIG_FILES: ${{ inputs.mycroft-config-files }}
        with:
          base-image-url: ${{ inputs.base-image-url }}
          image-path: ${{ inputs.image-path }}
          compress-with-xz: true
          cache: false
          shrink: true
          mount-repository: true
          env-vars: USER,PASSWORD,HOSTNAME,CONSTRAINTS,MYCROFT_CONFIG_FILES
          script-path: ${{ inputs.script-path }}

      - name: Set output image path
        id: set-output-image-path
        run: echo "::set-output name=image_path::${{ inputs.image-path }}"

      - name: Set output image size
        id: set-output-image-size
        run: |
          image_size=$(du -sh ${{ inputs.image-path }} | cut -f1)
          echo "::set-output name=image_size::$image_size"

      - name: Set output image sha256sum
        id: set-output-image-sha256sum
        run: |
          image_sha256sum=$(sha256sum ${{ inputs.image-path }} | cut -d ' ' -f 1)
          echo "::set-output name=image_sha256sum::$image_sha256sum"

      - name: Print outputs
        shell: bash
        run: |
          echo "image-path: ${{ steps.set-output-image-path.outputs.image_path }}"
          echo "image-size: ${{ steps.set-output-image-size.outputs.image_size }}"
          echo "image-sha256sum: ${{ steps.set-output-image-sha256sum.outputs.image_sha256sum }}"

      - name: Upload to release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.set-output-image-path.outputs.image_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}